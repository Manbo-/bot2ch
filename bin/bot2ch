#!/usr/bin/env ruby

require 'thor'
require 'bot2ch'
require 'thwait'

module Bot2ch
  class App < Thor
    WAIT_TIME = 3
    THREAD_LIMIT = 3
    Bot2ch.enable_downloader

    desc 'download', 'download images'
    option :wait
    option :thread
    option :override, :type => :boolean
    def download(thread, dir = nil)
      dat = Bot2ch::Thread.dat?(thread) ? dat : Bot2ch::Thread.url_to_dat(thread)
      thread = Bot2ch::Thread.new(dat)
      dir ||= default_dir_name(thread)
      wait_time = options[:wait_time] || WAIT_TIME
      images = thread.images
      puts "image not found" and return if images.empty?
      thall = ThreadsWait.new
      puts "save to: #{dir}"
      images.group_by{ |image| URI.parse(image.to_s).host }.each do |host, imgs|
        sleep 1 while thall.threads.select(&:alive?).size > thread_limit(options[:thread])
        thread = ::Thread.new do
          imgs.each.with_index(1) do |image, idx|
            image.download_to(dir, options[:override])
            sleep wait_time if idx != imgs.size
          end
        end
        thall.join_nowait(thread)
      end
      thall.all_waits
    end

    desc 'show', 'show images'
    def show(thread)
      thread = Bot2ch::Thread.url_to_dat(thread)
      puts Bot2ch::Thread.new(thread).images
    end

    private

    def default_dir_name(thread)
      "#{ENV['HOME']}/Downloads/2ch/#{thread.ita}/#{thread.dat_no}/"
    end

    def thread_limit(option)
      option ? option.to_i : THREAD_LIMIT
    end
  end
end

Bot2ch::App.start
